{
  "info": {
    "name": "Customer Service API",
    "description": "Complete API testing collection for the Customer Service Microservice\n\nThis collection includes:\n- CRUD operations for customers\n- Search and pagination\n- Error handling scenarios\n- Data validation tests\n\nPrerequisites:\n- Application running on http://localhost:8080\n- MongoDB connected and running",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "customer-service-v1"
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Application Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check if the application is running and healthy"
          },
          "response": []
        },
        {
          "name": "API Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v3/api-docs",
              "host": ["{{baseUrl}}"],
              "path": ["v3", "api-docs"]
            },
            "description": "Get OpenAPI documentation"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Customer CRUD",
      "item": [
        {
          "name": "Create Customer - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"]
            },
            "description": "Create a new customer with valid data"
          },
          "response": []
        },
        {
          "name": "Create Customer - Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 409 (Conflict)', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error message mentions duplicate email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"]
            },
            "description": "Attempt to create customer with duplicate email"
          },
          "response": []
        },
        {
          "name": "Create Customer - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"]
            },
            "description": "Create customer with invalid data to test validation"
          },
          "response": []
        },
        {
          "name": "Get Customer by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers/{{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers", "{{customerId}}"]
            },
            "description": "Retrieve customer by ID (uses customerId from previous create request)"
          },
          "response": []
        },
        {
          "name": "Get Customer by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers/non-existent-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers", "non-existent-id"]
            },
            "description": "Attempt to get customer with non-existent ID"
          },
          "response": []
        },
        {
          "name": "Update Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers/{{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers", "{{customerId}}"]
            },
            "description": "Update existing customer"
          },
          "response": []
        },
        {
          "name": "Delete Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers/{{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers", "{{customerId}}"]
            },
            "description": "Delete customer by ID"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Customer Listing & Search",
      "item": [
        {
          "name": "Get All Customers - Default Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.data).to.have.property('totalPages');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"]
            },
            "description": "Get all customers with default pagination"
          },
          "response": []
        },
        {
          "name": "Get Customers - Custom Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination parameters are respected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.size).to.eql(5);",
                  "    pm.expect(responseJson.data.number).to.eql(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers?page=0&size=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ]
            },
            "description": "Get customers with custom pagination (page 0, size 5)"
          },
          "response": []
        },
        {
          "name": "Get Customers - Filter by Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All customers have ACTIVE status', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.content.forEach(customer => {",
                  "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers?status=ACTIVE&page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Get customers filtered by ACTIVE status"
          },
          "response": []
        },
        {
          "name": "Search Customers by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain Alice', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.content.length > 0) {",
                  "        const hasAlice = responseJson.data.content.some(customer => ",
                  "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                  "        );",
                  "        pm.expect(hasAlice).to.be.true;",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers/search?name=Alice&page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "Alice"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Search customers by name containing 'Alice'"
          },
          "response": []
        },
        {
          "name": "Search Customers - No Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('No results found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                  "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers/search?name=NonExistentName123&page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "NonExistentName123"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Search for non-existent customer name"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Data Setup",
      "item": [
        {
          "name": "Create Test Customer - Alice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alice created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('aliceId', responseJson.data.customerId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"]
            },
            "description": "Create Alice Brown for testing search functionality"
          },
          "response": []
        },
        {
          "name": "Create Test Customer - Bob",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bob created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('bobId', responseJson.data.customerId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"]
            },
            "description": "Create Bob Wilson for testing status filtering"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Bulk Customer Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/customers?page=0&size=100",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "customers"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "100"
                }
              ]
            },
            "description": "Test performance with larger page size"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:8080');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to log response time",
          "console.log('Request completed in', pm.response.responseTime, 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}
