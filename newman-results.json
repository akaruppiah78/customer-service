{
  "collection": {
    "_": {
      "exporter_id": "customer-service-v1"
    },
    "item": [
      {
        "id": "3dd5d42c-905f-4f3c-87ec-df63592ddb57",
        "name": "Health Check",
        "item": [
          {
            "id": "ccdbbb86-6cbe-42ce-943a-cc09036ad230",
            "name": "Application Health Check",
            "request": {
              "description": {
                "content": "Check if the application is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "actuator",
                  "health"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "5fd6f93e-342a-4cbc-8825-845220319968",
            "name": "API Documentation",
            "request": {
              "description": {
                "content": "Get OpenAPI documentation",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v3",
                  "api-docs"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
        "name": "Customer CRUD",
        "item": [
          {
            "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
            "name": "Create Customer - Valid",
            "request": {
              "description": {
                "content": "Create a new customer with valid data",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Response has customer ID', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('customerId');",
                    "    pm.environment.set('customerId', responseJson.data.customerId);",
                    "});",
                    "",
                    "pm.test('Customer details are correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.firstName).to.eql('John');",
                    "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                    "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                    "});"
                  ],
                  "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                }
              }
            ]
          },
          {
            "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
            "name": "Create Customer - Duplicate Email",
            "request": {
              "description": {
                "content": "Attempt to create customer with duplicate email",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 409 (Conflict)', function () {",
                    "    pm.response.to.have.status(409);",
                    "});",
                    "",
                    "pm.test('Error message mentions duplicate email', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('already exists');",
                    "});"
                  ],
                  "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                }
              }
            ]
          },
          {
            "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
            "name": "Create Customer - Invalid Data",
            "request": {
              "description": {
                "content": "Create customer with invalid data to test validation",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 400 (Bad Request)', function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test('Validation errors are present', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('validation');",
                    "});"
                  ],
                  "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                }
              }
            ]
          },
          {
            "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
            "name": "Get Customer by ID",
            "request": {
              "description": {
                "content": "Retrieve customer by ID (uses customerId from previous create request)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "{{customerId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Customer details are returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('customerId');",
                    "    pm.expect(responseJson.data).to.have.property('firstName');",
                    "    pm.expect(responseJson.data).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                }
              }
            ]
          },
          {
            "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
            "name": "Get Customer by ID - Not Found",
            "request": {
              "description": {
                "content": "Attempt to get customer with non-existent ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "non-existent-id"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message indicates not found', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('not found');",
                    "});"
                  ],
                  "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                }
              }
            ]
          },
          {
            "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
            "name": "Update Customer",
            "request": {
              "description": {
                "content": "Update existing customer",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "{{customerId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Customer is updated', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                    "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                    "});"
                  ],
                  "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                }
              }
            ]
          },
          {
            "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
            "name": "Delete Customer",
            "request": {
              "description": {
                "content": "Delete customer by ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "{{customerId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Success message is returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('deleted');",
                    "});"
                  ],
                  "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "94d15d13-3688-42f7-ad01-40bacd3c9b92",
        "name": "Customer Listing & Search",
        "item": [
          {
            "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
            "name": "Get All Customers - Default Pagination",
            "request": {
              "description": {
                "content": "Get all customers with default pagination",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has pagination info', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('content');",
                    "    pm.expect(responseJson.data).to.have.property('totalElements');",
                    "    pm.expect(responseJson.data).to.have.property('totalPages');",
                    "});"
                  ],
                  "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
                }
              }
            ]
          },
          {
            "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
            "name": "Get Customers - Custom Pagination",
            "request": {
              "description": {
                "content": "Get customers with custom pagination (page 0, size 5)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "5"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Pagination parameters are respected', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.size).to.eql(5);",
                    "    pm.expect(responseJson.data.number).to.eql(0);",
                    "});"
                  ],
                  "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
                }
              }
            ]
          },
          {
            "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
            "name": "Get Customers - Filter by Status",
            "request": {
              "description": {
                "content": "Get customers filtered by ACTIVE status",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "status",
                    "value": "ACTIVE"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('All customers have ACTIVE status', function () {",
                    "    const responseJson = pm.response.json();",
                    "    responseJson.data.content.forEach(customer => {",
                    "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
                }
              }
            ]
          },
          {
            "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
            "name": "Search Customers by Name",
            "request": {
              "description": {
                "content": "Search customers by name containing 'Alice'",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "search"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "Alice"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Search results contain Alice', function () {",
                    "    const responseJson = pm.response.json();",
                    "    if (responseJson.data.content.length > 0) {",
                    "        const hasAlice = responseJson.data.content.some(customer => ",
                    "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                    "        );",
                    "        pm.expect(hasAlice).to.be.true;",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
                }
              }
            ]
          },
          {
            "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
            "name": "Search Customers - No Results",
            "request": {
              "description": {
                "content": "Search for non-existent customer name",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "search"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "NonExistentName123"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('No results found', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                    "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                    "});"
                  ],
                  "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "59b347e8-ad6e-478d-98b0-c3b6cabaaf35",
        "name": "Test Data Setup",
        "item": [
          {
            "id": "0e11bc8e-72c8-49d8-9316-b4949df596fa",
            "name": "Create Test Customer - Alice",
            "request": {
              "description": {
                "content": "Create Alice Brown for testing search functionality",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a40e97d0-7577-48ab-baab-38b3629d2d10",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Alice created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const responseJson = pm.response.json();",
                    "    pm.environment.set('aliceId', responseJson.data.customerId);",
                    "}"
                  ],
                  "_lastExecutionId": "0dbc0798-f2f3-4d2f-8ce0-21007bcbf1df"
                }
              }
            ]
          },
          {
            "id": "0605458f-8f06-46ee-a33b-20ec7b042be7",
            "name": "Create Test Customer - Bob",
            "request": {
              "description": {
                "content": "Create Bob Wilson for testing status filtering",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f489ebff-2bcc-4c90-8816-c41ad1c0a650",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Bob created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const responseJson = pm.response.json();",
                    "    pm.environment.set('bobId', responseJson.data.customerId);",
                    "}"
                  ],
                  "_lastExecutionId": "1c718b5a-c42c-44a1-97e7-8a4ea928a8e2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "11c39504-188d-4613-b87b-e8b040654ba7",
        "name": "Performance Tests",
        "item": [
          {
            "id": "996d108d-1b31-4ce1-b891-f06e6c117161",
            "name": "Bulk Customer Listing",
            "request": {
              "description": {
                "content": "Test performance with larger page size",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "100"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6602a3ed-615f-4865-af43-cb4092a42717",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is less than 1000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has pagination', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('content');",
                    "    pm.expect(responseJson.data).to.have.property('totalElements');",
                    "});"
                  ],
                  "_lastExecutionId": "429dd522-2c6b-4f96-a43a-07236781c482"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "a1703442-33b2-4a8b-89fa-8d601396fcca",
          "type": "text/javascript",
          "exec": [
            "// Set base URL if not already set",
            "if (!pm.environment.get('baseUrl')) {",
            "    pm.environment.set('baseUrl', 'http://localhost:8080');",
            "}"
          ],
          "_lastExecutionId": "13678f77-1cfd-43d3-ad14-e98ba022ffad"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "ded01f64-4c3e-4e56-a93c-5d832e3fa06d",
          "type": "text/javascript",
          "exec": [
            "// Global test to log response time",
            "console.log('Request completed in', pm.response.responseTime, 'ms');"
          ],
          "_lastExecutionId": "00ca415b-d7d8-433e-aad9-88ac230fedd1"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "14ffee26-16fc-4dd4-ad94-d1f75cbf9366",
      "name": "Customer Service API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete API testing collection for the Customer Service Microservice\n\nThis collection includes:\n- CRUD operations for customers\n- Search and pagination\n- Error handling scenarios\n- Data validation tests\n\nPrerequisites:\n- Application running on http://localhost:8080\n- MongoDB connected and running",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "customer-service-env",
    "name": "Customer Service Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "",
        "key": "customerId"
      },
      {
        "type": "any",
        "value": "",
        "key": "aliceId"
      },
      {
        "type": "any",
        "value": "",
        "key": "bobId"
      }
    ]
  },
  "globals": {
    "id": "51a295d5-112b-4d74-9b28-72e8e10b8a83",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 30,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 17,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 28.941176470588236,
      "responseMin": 4,
      "responseMax": 182,
      "responseSd": 44.47665691551719,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1754995114489,
      "completed": 1754995115325
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 17,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a7c48533-e84b-4e62-9251-95d6ee070332",
          "httpRequestId": "63deab80-3922-47df-a11c-d440c4240580"
        },
        "item": {
          "id": "ccdbbb86-6cbe-42ce-943a-cc09036ad230",
          "name": "Application Health Check",
          "request": {
            "description": {
              "content": "Check if the application is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "actuator",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "description": {
            "content": "Check if the application is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "actuator",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5943d88d-102f-494e-a866-2d4e09b5a9bf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c78c813c-665d-42f3-9847-3aff35cdfdfa",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 88,
          "responseSize": 94
        },
        "id": "ccdbbb86-6cbe-42ce-943a-cc09036ad230"
      },
      {
        "cursor": {
          "ref": "52da3a3d-f481-4962-9988-20757ae064b2",
          "length": 17,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12652771-58ef-42ef-b979-4f97a2349a9e"
        },
        "item": {
          "id": "5fd6f93e-342a-4cbc-8825-845220319968",
          "name": "API Documentation",
          "request": {
            "description": {
              "content": "Get OpenAPI documentation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v3",
                "api-docs"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "description": {
            "content": "Get OpenAPI documentation",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "v3",
              "api-docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f4288ce3-a43d-476b-b6a2-54b86a38c79d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1ca922f7-9978-43a5-802a-5cdee96ff5fa",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 94
        },
        "id": "5fd6f93e-342a-4cbc-8825-845220319968"
      },
      {
        "cursor": {
          "ref": "6fe0b696-12a1-43b0-a694-de2bc9103e94",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4c4fae5-4928-4e0a-801e-16fe88a60a81"
        },
        "item": {
          "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a new customer with valid data",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "752201e4-6870-4d87-9a1a-3c888ab1114c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "220",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
          }
        },
        "response": {
          "id": "b81611fa-8c8f-4d63-aa48-b716129fca70",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 182,
          "responseSize": 123
        },
        "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 409",
              "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response has customer ID",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has customer ID",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Customer details are correct",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Customer details are correct",
              "message": "Cannot read properties of undefined (reading 'firstName')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "15ed21db-b2ad-4982-88f8-f75420308884",
          "length": 17,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4c94efb-4d2f-47b3-87d8-4be696a942c9"
        },
        "item": {
          "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
          "name": "Create Customer - Duplicate Email",
          "request": {
            "description": {
              "content": "Attempt to create customer with duplicate email",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 409 (Conflict)', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error message mentions duplicate email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempt to create customer with duplicate email",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b3efe0d8-9270-478c-91ad-280e6bacca92",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "201",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
          }
        },
        "response": {
          "id": "4715bafc-a96a-4311-8fac-5e923e5e3a94",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 123
        },
        "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
        "assertions": [
          {
            "assertion": "Status code is 409 (Conflict)",
            "skipped": false
          },
          {
            "assertion": "Error message mentions duplicate email",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "93c3abce-c92c-42fd-a045-98bd2210a626",
          "length": 17,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "270fd7d5-cb12-452f-9835-ae8642e02bd6"
        },
        "item": {
          "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
          "name": "Create Customer - Invalid Data",
          "request": {
            "description": {
              "content": "Create customer with invalid data to test validation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ],
                "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create customer with invalid data to test validation",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "49f5afda-0d45-4f16-be33-1c0faf93fdf5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "156",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
          }
        },
        "response": {
          "id": "d0ccb1eb-999c-43b9-803f-d0ba1566b365",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 94
        },
        "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
        "assertions": [
          {
            "assertion": "Status code is 400 (Bad Request)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 (Bad Request)",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Validation errors are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Validation errors are present",
              "message": "expected 'An unexpected error occurred' to include 'validation'",
              "stack": "AssertionError: expected 'An unexpected error occurred' to include 'validation'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1c4f1fd9-5686-469e-aefc-f7c41442c9c0",
          "length": 17,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f1e3bfcc-920e-4c28-b578-29e5c0eb0fce"
        },
        "item": {
          "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
          "name": "Get Customer by ID",
          "request": {
            "description": {
              "content": "Retrieve customer by ID (uses customerId from previous create request)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Retrieve customer by ID (uses customerId from previous create request)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e1ff16d-cf53-448b-8cff-dc0f0c5caf0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "957082b3-9846-45d3-8b19-e082edd22a51",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 94
        },
        "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Customer details are returned",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Customer details are returned",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ffef432b-3633-4cf6-b90f-c80d2d951862",
          "length": 17,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b5bd1e69-b975-42da-af45-c31a0f627dba"
        },
        "item": {
          "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
          "name": "Get Customer by ID - Not Found",
          "request": {
            "description": {
              "content": "Attempt to get customer with non-existent ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "non-existent-id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('not found');",
                  "});"
                ],
                "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempt to get customer with non-existent ID",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              "non-existent-id"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a94b3b6a-634e-4ba8-8196-dd68071876ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2d2fc82e-c394-4191-9aea-fc3fa084d105",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              73,
              68,
              58,
              32,
              110,
              111,
              110,
              45,
              101,
              120,
              105,
              115,
              116,
              101,
              110,
              116,
              45,
              105,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 109
        },
        "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Error message indicates not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d739415c-f257-4617-8e75-eb79d4e8a597",
          "length": 17,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1526af41-7d1b-4b2e-a78c-4c0734ea10cd"
        },
        "item": {
          "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
          "name": "Update Customer",
          "request": {
            "description": {
              "content": "Update existing customer",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ],
                "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update existing customer",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1206381d-48d4-4653-8c99-d069392c6b68",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "227",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
          }
        },
        "response": {
          "id": "495b0e00-ec0e-4272-a0c4-537c255f6eb2",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 94
        },
        "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Customer is updated",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "Customer is updated",
              "message": "Cannot read properties of undefined (reading 'firstName')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "805d905a-2bfd-4d03-aa93-85bdb8aaddcd",
          "length": 17,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6c5d8cbe-e3d6-4c9e-a499-ccec3c3afa2a"
        },
        "item": {
          "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
          "name": "Delete Customer",
          "request": {
            "description": {
              "content": "Delete customer by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Delete customer by ID",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "20c6b360-f0be-429d-ac9a-6a363ca369b1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "975bccf0-a5bd-4b9d-ace3-fcdec8c62714",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 94
        },
        "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Success message is returned",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Success message is returned",
              "message": "expected 'An unexpected error occurred' to include 'deleted'",
              "stack": "AssertionError: expected 'An unexpected error occurred' to include 'deleted'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ed720804-13da-4227-8bb3-459fa724f34f",
          "length": 17,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79b4c7e7-7898-4647-83c9-ec731cd4812e"
        },
        "item": {
          "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
          "name": "Get All Customers - Default Pagination",
          "request": {
            "description": {
              "content": "Get all customers with default pagination",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.data).to.have.property('totalPages');",
                  "});"
                ],
                "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get all customers with default pagination",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e7ccf489-df02-4b1e-8ca4-b8b3c161ef6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3bbc0659-10d3-4c81-a7ea-b1e03159a49a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              99,
              97,
              101,
              98,
              101,
              102,
              101,
              99,
              45,
              98,
              52,
              99,
              51,
              45,
              52,
              98,
              49,
              57,
              45,
              57,
              53,
              57,
              102,
              45,
              53,
              57,
              100,
              55,
              99,
              49,
              51,
              98,
              99,
              51,
              48,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              46,
              116,
              101,
              115,
              116,
              46,
              50,
              48,
              50,
              53,
              48,
              56,
              48,
              56,
              95,
              49,
              49,
              52,
              55,
              52,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              51,
              57,
              99,
              99,
              100,
              57,
              49,
              52,
              45,
              100,
              52,
              53,
              101,
              45,
              52,
              54,
              50,
              55,
              45,
              56,
              52,
              98,
              98,
              45,
              100,
              101,
              55,
              53,
              54,
              51,
              53,
              51,
              99,
              100,
              50,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              52,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              102,
              102,
              100,
              53,
              101,
              97,
              54,
              97,
              45,
              50,
              99,
              98,
              49,
              45,
              52,
              49,
              49,
              49,
              45,
              56,
              51,
              48,
              50,
              45,
              49,
              55,
              98,
              57,
              97,
              54,
              97,
              98,
              55,
              55,
              100,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              51,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              98,
              98,
              50,
              56,
              50,
              99,
              57,
              56,
              45,
              50,
              100,
              98,
              52,
              45,
              52,
              100,
              55,
              99,
              45,
              56,
              56,
              53,
              100,
              45,
              48,
              99,
              100,
              55,
              51,
              49,
              53,
              54,
              53,
              54,
              52,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              46,
              110,
              101,
              119,
              109,
              97,
              110,
              50,
              48,
              50,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              98,
              51,
              54,
              50,
              56,
              102,
              99,
              45,
              53,
              100,
              50,
              102,
              45,
              52,
              100,
              48,
              50,
              45,
              57,
              97,
              50,
              101,
              45,
              99,
              101,
              50,
              100,
              55,
              52,
              99,
              55,
              48,
              56,
              100,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              105,
              108,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              119,
              105,
              108,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              57,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 64,
          "responseSize": 1604
        },
        "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has pagination info",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has pagination info",
              "message": "expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'",
              "stack": "AssertionError: expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8762f7c-1e8c-4fd3-8c9a-48ce494c1ef0",
          "length": 17,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4c34e1d1-d6b6-41a1-8dfe-9c72027ae574"
        },
        "item": {
          "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
          "name": "Get Customers - Custom Pagination",
          "request": {
            "description": {
              "content": "Get customers with custom pagination (page 0, size 5)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination parameters are respected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.size).to.eql(5);",
                  "    pm.expect(responseJson.data.number).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get customers with custom pagination (page 0, size 5)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "5"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d830b6f0-7497-4b89-b999-e0dcc3ff12f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a42176dd-79a6-406f-baf4-80d715f16d02",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              99,
              97,
              101,
              98,
              101,
              102,
              101,
              99,
              45,
              98,
              52,
              99,
              51,
              45,
              52,
              98,
              49,
              57,
              45,
              57,
              53,
              57,
              102,
              45,
              53,
              57,
              100,
              55,
              99,
              49,
              51,
              98,
              99,
              51,
              48,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              46,
              116,
              101,
              115,
              116,
              46,
              50,
              48,
              50,
              53,
              48,
              56,
              48,
              56,
              95,
              49,
              49,
              52,
              55,
              52,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              51,
              57,
              99,
              99,
              100,
              57,
              49,
              52,
              45,
              100,
              52,
              53,
              101,
              45,
              52,
              54,
              50,
              55,
              45,
              56,
              52,
              98,
              98,
              45,
              100,
              101,
              55,
              53,
              54,
              51,
              53,
              51,
              99,
              100,
              50,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              52,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              102,
              102,
              100,
              53,
              101,
              97,
              54,
              97,
              45,
              50,
              99,
              98,
              49,
              45,
              52,
              49,
              49,
              49,
              45,
              56,
              51,
              48,
              50,
              45,
              49,
              55,
              98,
              57,
              97,
              54,
              97,
              98,
              55,
              55,
              100,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              51,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              98,
              98,
              50,
              56,
              50,
              99,
              57,
              56,
              45,
              50,
              100,
              98,
              52,
              45,
              52,
              100,
              55,
              99,
              45,
              56,
              56,
              53,
              100,
              45,
              48,
              99,
              100,
              55,
              51,
              49,
              53,
              54,
              53,
              54,
              52,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              46,
              110,
              101,
              119,
              109,
              97,
              110,
              50,
              48,
              50,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              98,
              51,
              54,
              50,
              56,
              102,
              99,
              45,
              53,
              100,
              50,
              102,
              45,
              52,
              100,
              48,
              50,
              45,
              57,
              97,
              50,
              101,
              45,
              99,
              101,
              50,
              100,
              55,
              52,
              99,
              55,
              48,
              56,
              100,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              105,
              108,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              119,
              105,
              108,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              53,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              57,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              50,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 1032
        },
        "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Pagination parameters are respected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Pagination parameters are respected",
              "message": "expected undefined to deeply equal +0",
              "stack": "AssertionError: expected undefined to deeply equal +0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a5bac8d2-4f5e-469b-8b1e-21349a7f3b52",
          "length": 17,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "90bbe509-3f93-4e7d-9285-e71d01067f97"
        },
        "item": {
          "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
          "name": "Get Customers - Filter by Status",
          "request": {
            "description": {
              "content": "Get customers filtered by ACTIVE status",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All customers have ACTIVE status', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.content.forEach(customer => {",
                  "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get customers filtered by ACTIVE status",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "status",
                "value": "ACTIVE"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d53aa02-9a7c-4135-b69d-fa25f187a393",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0168915a-2205-43c9-8bec-9dc30f3fd0a5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              99,
              97,
              101,
              98,
              101,
              102,
              101,
              99,
              45,
              98,
              52,
              99,
              51,
              45,
              52,
              98,
              49,
              57,
              45,
              57,
              53,
              57,
              102,
              45,
              53,
              57,
              100,
              55,
              99,
              49,
              51,
              98,
              99,
              51,
              48,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              46,
              116,
              101,
              115,
              116,
              46,
              50,
              48,
              50,
              53,
              48,
              56,
              48,
              56,
              95,
              49,
              49,
              52,
              55,
              52,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              51,
              57,
              99,
              99,
              100,
              57,
              49,
              52,
              45,
              100,
              52,
              53,
              101,
              45,
              52,
              54,
              50,
              55,
              45,
              56,
              52,
              98,
              98,
              45,
              100,
              101,
              55,
              53,
              54,
              51,
              53,
              51,
              99,
              100,
              50,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              52,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              102,
              102,
              100,
              53,
              101,
              97,
              54,
              97,
              45,
              50,
              99,
              98,
              49,
              45,
              52,
              49,
              49,
              49,
              45,
              56,
              51,
              48,
              50,
              45,
              49,
              55,
              98,
              57,
              97,
              54,
              97,
              98,
              55,
              55,
              100,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              51,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              98,
              98,
              50,
              56,
              50,
              99,
              57,
              56,
              45,
              50,
              100,
              98,
              52,
              45,
              52,
              100,
              55,
              99,
              45,
              56,
              56,
              53,
              100,
              45,
              48,
              99,
              100,
              55,
              51,
              49,
              53,
              54,
              53,
              54,
              52,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              46,
              110,
              101,
              119,
              109,
              97,
              110,
              50,
              48,
              50,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              55,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 31,
          "responseSize": 1308
        },
        "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "All customers have ACTIVE status",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "All customers have ACTIVE status",
              "message": "Cannot read properties of undefined (reading 'forEach')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'forEach')\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "073933f7-dcc5-4969-8931-046d892da90e",
          "length": 17,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ebff50f4-c404-4b86-8197-3bbc2f2b8237"
        },
        "item": {
          "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
          "name": "Search Customers by Name",
          "request": {
            "description": {
              "content": "Search customers by name containing 'Alice'",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "Alice"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain Alice', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.content.length > 0) {",
                  "        const hasAlice = responseJson.data.content.some(customer => ",
                  "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                  "        );",
                  "        pm.expect(hasAlice).to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Search customers by name containing 'Alice'",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": "Alice"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3db11cf9-e56f-465b-9852-f538bda93b61",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "62e1864b-98fd-4394-803a-542fd9964c4b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              49,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 30,
          "responseSize": 364
        },
        "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Search results contain Alice",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "Search results contain Alice",
              "message": "Cannot read properties of undefined (reading 'length')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'length')\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f63fe7fa-9851-4290-8698-e506e1f1a1a9",
          "length": 17,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f79fb08a-2635-41bc-896d-881882800927"
        },
        "item": {
          "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
          "name": "Search Customers - No Results",
          "request": {
            "description": {
              "content": "Search for non-existent customer name",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "NonExistentName123"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('No results found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                  "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Search for non-existent customer name",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": "NonExistentName123"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "956aedfb-4eed-468e-847b-fdbf065313b3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1b789655-e064-449d-a323-34fc806e53cf",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              48,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 212
        },
        "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "No results found",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "No results found",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "748c84e4-537d-40e2-a34b-3c0c4c19d94f",
          "length": 17,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9c5b9d04-7562-476e-9554-507126c7d6a4"
        },
        "item": {
          "id": "0e11bc8e-72c8-49d8-9316-b4949df596fa",
          "name": "Create Test Customer - Alice",
          "request": {
            "description": {
              "content": "Create Alice Brown for testing search functionality",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a40e97d0-7577-48ab-baab-38b3629d2d10",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alice created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('aliceId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "0dbc0798-f2f3-4d2f-8ce0-21007bcbf1df"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create Alice Brown for testing search functionality",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95754724-16e7-4903-8503-62deb53a0ccc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "211",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
          }
        },
        "response": {
          "id": "3d799584-b975-48f8-9502-54f8bf14dd91",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 126
        },
        "id": "0e11bc8e-72c8-49d8-9316-b4949df596fa",
        "assertions": [
          {
            "assertion": "Alice created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Alice created successfully",
              "message": "expected response to have status code 201 but got 409",
              "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5dcaa643-3410-4675-ba4e-7cc1c9c8cb1c",
          "length": 17,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "47fd45cc-95b8-4356-a874-ad4045ca88a5"
        },
        "item": {
          "id": "0605458f-8f06-46ee-a33b-20ec7b042be7",
          "name": "Create Test Customer - Bob",
          "request": {
            "description": {
              "content": "Create Bob Wilson for testing status filtering",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f489ebff-2bcc-4c90-8816-c41ad1c0a650",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bob created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('bobId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "1c718b5a-c42c-44a1-97e7-8a4ea928a8e2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create Bob Wilson for testing status filtering",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "82fb405a-e876-4769-8d30-93fedb806442",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "214",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
          }
        },
        "response": {
          "id": "64aa748d-c2d2-4473-971d-6189f96d4a18",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              98,
              111,
              98,
              46,
              119,
              105,
              108,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 125
        },
        "id": "0605458f-8f06-46ee-a33b-20ec7b042be7",
        "assertions": [
          {
            "assertion": "Bob created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Bob created successfully",
              "message": "expected response to have status code 201 but got 409",
              "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6ae5bdc2-0e4b-4486-a15b-a89dc685ff86",
          "length": 17,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "52753e06-10d8-4a93-8161-300397e7e333"
        },
        "item": {
          "id": "996d108d-1b31-4ce1-b891-f06e6c117161",
          "name": "Bulk Customer Listing",
          "request": {
            "description": {
              "content": "Test performance with larger page size",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6602a3ed-615f-4865-af43-cb4092a42717",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "});"
                ],
                "_lastExecutionId": "429dd522-2c6b-4f96-a43a-07236781c482"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test performance with larger page size",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bd3ab3e7-1ec7-4b6d-a4ce-143f2ee9054c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f43aef04-9606-4644-b4dd-11df03182693",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Tue, 12 Aug 2025 10:38:34 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              99,
              97,
              101,
              98,
              101,
              102,
              101,
              99,
              45,
              98,
              52,
              99,
              51,
              45,
              52,
              98,
              49,
              57,
              45,
              57,
              53,
              57,
              102,
              45,
              53,
              57,
              100,
              55,
              99,
              49,
              51,
              98,
              99,
              51,
              48,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              110,
              100,
              101,
              100,
              46,
              116,
              101,
              115,
              116,
              46,
              50,
              48,
              50,
              53,
              48,
              56,
              48,
              56,
              95,
              49,
              49,
              52,
              55,
              52,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              51,
              57,
              99,
              99,
              100,
              57,
              49,
              52,
              45,
              100,
              52,
              53,
              101,
              45,
              52,
              54,
              50,
              55,
              45,
              56,
              52,
              98,
              98,
              45,
              100,
              101,
              55,
              53,
              54,
              51,
              53,
              51,
              99,
              100,
              50,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              52,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              102,
              102,
              100,
              53,
              101,
              97,
              54,
              97,
              45,
              50,
              99,
              98,
              49,
              45,
              52,
              49,
              49,
              49,
              45,
              56,
              51,
              48,
              50,
              45,
              49,
              55,
              98,
              57,
              97,
              54,
              97,
              98,
              55,
              55,
              100,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              52,
              54,
              51,
              51,
              55,
              51,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              98,
              98,
              50,
              56,
              50,
              99,
              57,
              56,
              45,
              50,
              100,
              98,
              52,
              45,
              52,
              100,
              55,
              99,
              45,
              56,
              56,
              53,
              100,
              45,
              48,
              99,
              100,
              55,
              51,
              49,
              53,
              54,
              53,
              54,
              52,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              46,
              110,
              101,
              119,
              109,
              97,
              110,
              50,
              48,
              50,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              98,
              51,
              54,
              50,
              56,
              102,
              99,
              45,
              53,
              100,
              50,
              102,
              45,
              52,
              100,
              48,
              50,
              45,
              57,
              97,
              50,
              101,
              45,
              99,
              101,
              50,
              100,
              55,
              52,
              99,
              55,
              48,
              56,
              100,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              105,
              108,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              119,
              105,
              108,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              57,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              50,
              84,
              49,
              48,
              58,
              51,
              56,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 1605
        },
        "id": "996d108d-1b31-4ce1-b891-f06e6c117161",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Response has pagination",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has pagination",
              "message": "expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'",
              "stack": "AssertionError: expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:3:17)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 7295
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 409",
          "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "ad19baece84d02cd43c59a6e371a3a9e",
          "id": "010b219b-ece3-402e-b89a-18fb6a66acfa",
          "timestamp": 1754995114825,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6fe0b696-12a1-43b0-a694-de2bc9103e94",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4c4fae5-4928-4e0a-801e-16fe88a60a81",
          "scriptId": "1011d116-d611-4a09-8482-60bd39d76f52",
          "execution": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has customer ID",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "d85eedb6f354a4468f42067421d9cdc0",
          "id": "06ab7bea-65bc-42a9-a884-0c2425ff217c",
          "timestamp": 1754995114827,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6fe0b696-12a1-43b0-a694-de2bc9103e94",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4c4fae5-4928-4e0a-801e-16fe88a60a81",
          "scriptId": "1011d116-d611-4a09-8482-60bd39d76f52",
          "execution": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Customer details are correct",
          "message": "Cannot read properties of undefined (reading 'firstName')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "64a02b973e7df6a2891cdee0266aed1c",
          "id": "8554aa62-b709-451a-b81a-d6a89f08d468",
          "timestamp": 1754995114828,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6fe0b696-12a1-43b0-a694-de2bc9103e94",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4c4fae5-4928-4e0a-801e-16fe88a60a81",
          "scriptId": "1011d116-d611-4a09-8482-60bd39d76f52",
          "execution": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 (Bad Request)",
          "message": "expected response to have status code 400 but got 500",
          "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "54c379953c125f222334b67f38f76aa8",
          "id": "713e1d7d-8287-4f8d-b76e-33ff187d415f",
          "timestamp": 1754995114876,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
          "name": "Create Customer - Invalid Data",
          "request": {
            "description": {
              "content": "Create customer with invalid data to test validation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ],
                "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "93c3abce-c92c-42fd-a045-98bd2210a626",
          "length": 17,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "270fd7d5-cb12-452f-9835-ae8642e02bd6",
          "scriptId": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
          "execution": "a5815a8b-d845-4c83-83c7-934ef24096a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Validation errors are present",
          "message": "expected 'An unexpected error occurred' to include 'validation'",
          "stack": "AssertionError: expected 'An unexpected error occurred' to include 'validation'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "b9d34caa95e5bf08f323d7b54a1dd475",
          "id": "7cce52af-87cf-4b15-a700-861a3d715a61",
          "timestamp": 1754995114877,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
          "name": "Create Customer - Invalid Data",
          "request": {
            "description": {
              "content": "Create customer with invalid data to test validation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ],
                "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "93c3abce-c92c-42fd-a045-98bd2210a626",
          "length": 17,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "270fd7d5-cb12-452f-9835-ae8642e02bd6",
          "scriptId": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
          "execution": "a5815a8b-d845-4c83-83c7-934ef24096a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "88077207591abb7eae0749194e10f99e",
          "id": "be4b828f-f987-4719-a10b-c8f0f0f97d3c",
          "timestamp": 1754995114896,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
          "name": "Get Customer by ID",
          "request": {
            "description": {
              "content": "Retrieve customer by ID (uses customerId from previous create request)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1c4f1fd9-5686-469e-aefc-f7c41442c9c0",
          "length": 17,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f1e3bfcc-920e-4c28-b578-29e5c0eb0fce",
          "scriptId": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
          "execution": "e7720653-737a-4751-b24e-92657fd0be8a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Customer details are returned",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "a8e9952a471b8381d70a23028a3d84b5",
          "id": "7afd4ffd-1fba-4900-a34e-61796f5615cb",
          "timestamp": 1754995114896,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
          "name": "Get Customer by ID",
          "request": {
            "description": {
              "content": "Retrieve customer by ID (uses customerId from previous create request)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1c4f1fd9-5686-469e-aefc-f7c41442c9c0",
          "length": 17,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f1e3bfcc-920e-4c28-b578-29e5c0eb0fce",
          "scriptId": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
          "execution": "e7720653-737a-4751-b24e-92657fd0be8a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "42ae30cde23ec0a499343a1bff359dbf",
          "id": "0c5fc11c-1cdf-44f6-9f1d-bd26647193eb",
          "timestamp": 1754995114947,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
          "name": "Update Customer",
          "request": {
            "description": {
              "content": "Update existing customer",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ],
                "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d739415c-f257-4617-8e75-eb79d4e8a597",
          "length": 17,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1526af41-7d1b-4b2e-a78c-4c0734ea10cd",
          "scriptId": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
          "execution": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "Customer is updated",
          "message": "Cannot read properties of undefined (reading 'firstName')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "54a0b039c271a8bc2fd32f44cf81a9bc",
          "id": "41eba108-d503-4964-a2b9-dcd2cf330976",
          "timestamp": 1754995114948,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
          "name": "Update Customer",
          "request": {
            "description": {
              "content": "Update existing customer",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ],
                "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d739415c-f257-4617-8e75-eb79d4e8a597",
          "length": 17,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1526af41-7d1b-4b2e-a78c-4c0734ea10cd",
          "scriptId": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
          "execution": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "71c452758108f3ab55bcdae8c5e6d402",
          "id": "b50aae1f-f042-41be-8051-81f86e4cd602",
          "timestamp": 1754995114994,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
          "name": "Delete Customer",
          "request": {
            "description": {
              "content": "Delete customer by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "805d905a-2bfd-4d03-aa93-85bdb8aaddcd",
          "length": 17,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6c5d8cbe-e3d6-4c9e-a499-ccec3c3afa2a",
          "scriptId": "e378ede7-355b-474b-8511-6d6a5e340a3a",
          "execution": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Success message is returned",
          "message": "expected 'An unexpected error occurred' to include 'deleted'",
          "stack": "AssertionError: expected 'An unexpected error occurred' to include 'deleted'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "17e58b157e77ad0428e565c8dce9f253",
          "id": "3fa22c20-c2b4-49d0-9432-382bab8a9289",
          "timestamp": 1754995114995,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
          "name": "Delete Customer",
          "request": {
            "description": {
              "content": "Delete customer by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
              }
            }
          ]
        },
        "parent": {
          "id": "2e76edbd-3fa6-47bf-8dc9-b5aabc903e26",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "5a6e6e54-d319-4e97-8425-2a067cb916d8",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1011d116-d611-4a09-8482-60bd39d76f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6ebb53-ec9b-4168-bfcb-5f2a9c29ff9b"
                  }
                }
              ]
            },
            {
              "id": "e274195f-1ffe-4e3a-860f-836c56c9efe1",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48293a6-0965-4df8-82a9-c285a4788d09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "0e12293b-3612-4185-955b-654e244d3329"
                  }
                }
              ]
            },
            {
              "id": "643c03cb-0106-4a65-950e-b799e8cc1d45",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5c70ccb-d519-41c9-b84d-3b1e76b5de8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "a5815a8b-d845-4c83-83c7-934ef24096a3"
                  }
                }
              ]
            },
            {
              "id": "f292f60c-07fa-481a-bd95-5f4fbc9418f2",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c3d8403-0e70-4522-8eda-5366ecb45cd2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "e7720653-737a-4751-b24e-92657fd0be8a"
                  }
                }
              ]
            },
            {
              "id": "15045dbe-96fd-49e3-beb9-3378d0fdc77b",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c560ade-0082-48f8-9b9b-02ea723be142",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "5f63400b-ade0-4d3e-b396-c544142e0789"
                  }
                }
              ]
            },
            {
              "id": "b63d288c-e3f9-4a80-aec6-e55eb5d9a7be",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9aa9db09-3cfc-42bc-8bda-df5909d422b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "20c1f059-28c2-4686-a5a9-6bd6268bc5f1"
                  }
                }
              ]
            },
            {
              "id": "9fe7862f-726e-4f7d-a416-148b0bc88c25",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e378ede7-355b-474b-8511-6d6a5e340a3a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "805d905a-2bfd-4d03-aa93-85bdb8aaddcd",
          "length": 17,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6c5d8cbe-e3d6-4c9e-a499-ccec3c3afa2a",
          "scriptId": "e378ede7-355b-474b-8511-6d6a5e340a3a",
          "execution": "b7dd87e8-dd20-4de8-ae7a-2d7419a62ca0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has pagination info",
          "message": "expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'",
          "stack": "AssertionError: expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "929da24dbefb82b4f63595beddc1cf5c",
          "id": "f1786863-ef96-4881-aa45-d2db997c212b",
          "timestamp": 1754995115076,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
          "name": "Get All Customers - Default Pagination",
          "request": {
            "description": {
              "content": "Get all customers with default pagination",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.data).to.have.property('totalPages');",
                  "});"
                ],
                "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
              }
            }
          ]
        },
        "parent": {
          "id": "94d15d13-3688-42f7-ad01-40bacd3c9b92",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
                  }
                }
              ]
            },
            {
              "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
                  }
                }
              ]
            },
            {
              "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
                  }
                }
              ]
            },
            {
              "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
                  }
                }
              ]
            },
            {
              "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ed720804-13da-4227-8bb3-459fa724f34f",
          "length": 17,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79b4c7e7-7898-4647-83c9-ec731cd4812e",
          "scriptId": "12843da6-1fbe-4273-94de-18e2ba049a2d",
          "execution": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Pagination parameters are respected",
          "message": "expected undefined to deeply equal +0",
          "stack": "AssertionError: expected undefined to deeply equal +0\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "6036439b8831a37599f7c8f38fbcdf69",
          "id": "2fff1475-f31c-4c1f-849d-c4353add335c",
          "timestamp": 1754995115099,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
          "name": "Get Customers - Custom Pagination",
          "request": {
            "description": {
              "content": "Get customers with custom pagination (page 0, size 5)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination parameters are respected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.size).to.eql(5);",
                  "    pm.expect(responseJson.data.number).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
              }
            }
          ]
        },
        "parent": {
          "id": "94d15d13-3688-42f7-ad01-40bacd3c9b92",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
                  }
                }
              ]
            },
            {
              "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
                  }
                }
              ]
            },
            {
              "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
                  }
                }
              ]
            },
            {
              "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
                  }
                }
              ]
            },
            {
              "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8762f7c-1e8c-4fd3-8c9a-48ce494c1ef0",
          "length": 17,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4c34e1d1-d6b6-41a1-8dfe-9c72027ae574",
          "scriptId": "18cc52de-596e-49c3-9dcf-63e335137348",
          "execution": "786602f5-2689-4657-b845-0f6023971bc0"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "All customers have ACTIVE status",
          "message": "Cannot read properties of undefined (reading 'forEach')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'forEach')\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "a0ac6781684a6041ad7ba4825d74d17c",
          "id": "d357b986-9a57-424a-b526-4e0f602eb5fa",
          "timestamp": 1754995115143,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
          "name": "Get Customers - Filter by Status",
          "request": {
            "description": {
              "content": "Get customers filtered by ACTIVE status",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All customers have ACTIVE status', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.content.forEach(customer => {",
                  "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
              }
            }
          ]
        },
        "parent": {
          "id": "94d15d13-3688-42f7-ad01-40bacd3c9b92",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
                  }
                }
              ]
            },
            {
              "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
                  }
                }
              ]
            },
            {
              "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
                  }
                }
              ]
            },
            {
              "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
                  }
                }
              ]
            },
            {
              "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a5bac8d2-4f5e-469b-8b1e-21349a7f3b52",
          "length": 17,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "90bbe509-3f93-4e7d-9285-e71d01067f97",
          "scriptId": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
          "execution": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "Search results contain Alice",
          "message": "Cannot read properties of undefined (reading 'length')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'length')\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "b583fa792ed88a4476c338c67053c8bd",
          "id": "d77e683e-1eb8-4898-afff-f7b3497cffdf",
          "timestamp": 1754995115227,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
          "name": "Search Customers by Name",
          "request": {
            "description": {
              "content": "Search customers by name containing 'Alice'",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "Alice"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain Alice', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.content.length > 0) {",
                  "        const hasAlice = responseJson.data.content.some(customer => ",
                  "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                  "        );",
                  "        pm.expect(hasAlice).to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
              }
            }
          ]
        },
        "parent": {
          "id": "94d15d13-3688-42f7-ad01-40bacd3c9b92",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
                  }
                }
              ]
            },
            {
              "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
                  }
                }
              ]
            },
            {
              "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
                  }
                }
              ]
            },
            {
              "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
                  }
                }
              ]
            },
            {
              "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "073933f7-dcc5-4969-8931-046d892da90e",
          "length": 17,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ebff50f4-c404-4b86-8197-3bbc2f2b8237",
          "scriptId": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
          "execution": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "No results found",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "aa962e3209d748fe4065e2f275f1c200",
          "id": "d370deda-a35b-4842-a38d-191ad4792dc3",
          "timestamp": 1754995115248,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
          "name": "Search Customers - No Results",
          "request": {
            "description": {
              "content": "Search for non-existent customer name",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "NonExistentName123"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('No results found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                  "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
              }
            }
          ]
        },
        "parent": {
          "id": "94d15d13-3688-42f7-ad01-40bacd3c9b92",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "dafab16b-1658-4180-a0fd-c9aeeb16d242",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12843da6-1fbe-4273-94de-18e2ba049a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "ed71208b-b5ed-4c7f-9107-0bb4f0113f49"
                  }
                }
              ]
            },
            {
              "id": "def3d24d-ec3a-4f15-8413-f2642a3c8219",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18cc52de-596e-49c3-9dcf-63e335137348",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "786602f5-2689-4657-b845-0f6023971bc0"
                  }
                }
              ]
            },
            {
              "id": "82dea05d-7b4a-499c-9277-6368ffe57717",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3df02d08-d776-4321-b2e1-855ad0fda4e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d20bc2ea-e7ef-4546-9ed5-41bec3c6b3ca"
                  }
                }
              ]
            },
            {
              "id": "2d4e576c-a598-4e7c-941b-0286f9ba8562",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83a3b886-bdfd-4e5b-a4e6-01a17d1b0ed9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "45b0e697-23da-4e26-becc-3cc7c2044ba7"
                  }
                }
              ]
            },
            {
              "id": "ec092449-7170-4297-bdac-6e562a18aa1b",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f63fe7fa-9851-4290-8698-e506e1f1a1a9",
          "length": 17,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f79fb08a-2635-41bc-896d-881882800927",
          "scriptId": "78af5e1e-47f1-4dd0-bb0f-ecd34b4e4fe5",
          "execution": "c587759d-e4e0-484d-8f49-63b1e7858fb4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Alice created successfully",
          "message": "expected response to have status code 201 but got 409",
          "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "6bbbf1cec3f6b75e87c978afe488c2a3",
          "id": "7b051296-cbf4-4a05-b71f-1cc75371582d",
          "timestamp": 1754995115278,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0e11bc8e-72c8-49d8-9316-b4949df596fa",
          "name": "Create Test Customer - Alice",
          "request": {
            "description": {
              "content": "Create Alice Brown for testing search functionality",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a40e97d0-7577-48ab-baab-38b3629d2d10",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alice created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('aliceId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "0dbc0798-f2f3-4d2f-8ce0-21007bcbf1df"
              }
            }
          ]
        },
        "parent": {
          "id": "59b347e8-ad6e-478d-98b0-c3b6cabaaf35",
          "name": "Test Data Setup",
          "item": [
            {
              "id": "0e11bc8e-72c8-49d8-9316-b4949df596fa",
              "name": "Create Test Customer - Alice",
              "request": {
                "description": {
                  "content": "Create Alice Brown for testing search functionality",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a40e97d0-7577-48ab-baab-38b3629d2d10",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Alice created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('aliceId', responseJson.data.customerId);",
                      "}"
                    ],
                    "_lastExecutionId": "0dbc0798-f2f3-4d2f-8ce0-21007bcbf1df"
                  }
                }
              ]
            },
            {
              "id": "0605458f-8f06-46ee-a33b-20ec7b042be7",
              "name": "Create Test Customer - Bob",
              "request": {
                "description": {
                  "content": "Create Bob Wilson for testing status filtering",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f489ebff-2bcc-4c90-8816-c41ad1c0a650",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bob created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('bobId', responseJson.data.customerId);",
                      "}"
                    ],
                    "_lastExecutionId": "1c718b5a-c42c-44a1-97e7-8a4ea928a8e2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "748c84e4-537d-40e2-a34b-3c0c4c19d94f",
          "length": 17,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9c5b9d04-7562-476e-9554-507126c7d6a4",
          "scriptId": "a40e97d0-7577-48ab-baab-38b3629d2d10",
          "execution": "0dbc0798-f2f3-4d2f-8ce0-21007bcbf1df"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Bob created successfully",
          "message": "expected response to have status code 201 but got 409",
          "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "bf26f55f6ebb8389f518a49982c92aaf",
          "id": "257a3232-9395-4c68-ad79-c828fe5f1e9e",
          "timestamp": 1754995115298,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0605458f-8f06-46ee-a33b-20ec7b042be7",
          "name": "Create Test Customer - Bob",
          "request": {
            "description": {
              "content": "Create Bob Wilson for testing status filtering",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f489ebff-2bcc-4c90-8816-c41ad1c0a650",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bob created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('bobId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "1c718b5a-c42c-44a1-97e7-8a4ea928a8e2"
              }
            }
          ]
        },
        "parent": {
          "id": "59b347e8-ad6e-478d-98b0-c3b6cabaaf35",
          "name": "Test Data Setup",
          "item": [
            {
              "id": "0e11bc8e-72c8-49d8-9316-b4949df596fa",
              "name": "Create Test Customer - Alice",
              "request": {
                "description": {
                  "content": "Create Alice Brown for testing search functionality",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a40e97d0-7577-48ab-baab-38b3629d2d10",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Alice created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('aliceId', responseJson.data.customerId);",
                      "}"
                    ],
                    "_lastExecutionId": "0dbc0798-f2f3-4d2f-8ce0-21007bcbf1df"
                  }
                }
              ]
            },
            {
              "id": "0605458f-8f06-46ee-a33b-20ec7b042be7",
              "name": "Create Test Customer - Bob",
              "request": {
                "description": {
                  "content": "Create Bob Wilson for testing status filtering",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f489ebff-2bcc-4c90-8816-c41ad1c0a650",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bob created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('bobId', responseJson.data.customerId);",
                      "}"
                    ],
                    "_lastExecutionId": "1c718b5a-c42c-44a1-97e7-8a4ea928a8e2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5dcaa643-3410-4675-ba4e-7cc1c9c8cb1c",
          "length": 17,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "47fd45cc-95b8-4356-a874-ad4045ca88a5",
          "scriptId": "f489ebff-2bcc-4c90-8816-c41ad1c0a650",
          "execution": "1c718b5a-c42c-44a1-97e7-8a4ea928a8e2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has pagination",
          "message": "expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'",
          "stack": "AssertionError: expected { customers: [ { …(5) }, …(8) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:3:17)",
          "checksum": "dd034db57f59083458712fd78d0cc44f",
          "id": "806a86cc-b847-4222-856c-2ed2a521f509",
          "timestamp": 1754995115322,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "996d108d-1b31-4ce1-b891-f06e6c117161",
          "name": "Bulk Customer Listing",
          "request": {
            "description": {
              "content": "Test performance with larger page size",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6602a3ed-615f-4865-af43-cb4092a42717",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "});"
                ],
                "_lastExecutionId": "429dd522-2c6b-4f96-a43a-07236781c482"
              }
            }
          ]
        },
        "parent": {
          "id": "11c39504-188d-4613-b87b-e8b040654ba7",
          "name": "Performance Tests",
          "item": [
            {
              "id": "996d108d-1b31-4ce1-b891-f06e6c117161",
              "name": "Bulk Customer Listing",
              "request": {
                "description": {
                  "content": "Test performance with larger page size",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6602a3ed-615f-4865-af43-cb4092a42717",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has pagination', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "});"
                    ],
                    "_lastExecutionId": "429dd522-2c6b-4f96-a43a-07236781c482"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6ae5bdc2-0e4b-4486-a15b-a89dc685ff86",
          "length": 17,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "52753e06-10d8-4a93-8161-300397e7e333",
          "scriptId": "6602a3ed-615f-4865-af43-cb4092a42717",
          "execution": "429dd522-2c6b-4f96-a43a-07236781c482"
        }
      }
    ],
    "error": null
  }
}