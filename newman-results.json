{
  "collection": {
    "_": {
      "exporter_id": "customer-service-v1"
    },
    "item": [
      {
        "id": "76368d47-2b2b-4299-9d22-336ee8ae19f3",
        "name": "Health Check",
        "item": [
          {
            "id": "991fa326-58c3-4b57-991d-d728efe65ddb",
            "name": "Application Health Check",
            "request": {
              "description": {
                "content": "Check if the application is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "actuator",
                  "health"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "0e9b9afa-78f9-424f-a25b-d46d44814d51",
            "name": "API Documentation",
            "request": {
              "description": {
                "content": "Get OpenAPI documentation",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v3",
                  "api-docs"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
        "name": "Customer CRUD",
        "item": [
          {
            "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
            "name": "Create Customer - Valid",
            "request": {
              "description": {
                "content": "Create a new customer with valid data",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Response has customer ID', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('customerId');",
                    "    pm.environment.set('customerId', responseJson.data.customerId);",
                    "});",
                    "",
                    "pm.test('Customer details are correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.firstName).to.eql('John');",
                    "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                    "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                    "});"
                  ],
                  "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                }
              }
            ]
          },
          {
            "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
            "name": "Create Customer - Duplicate Email",
            "request": {
              "description": {
                "content": "Attempt to create customer with duplicate email",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 409 (Conflict)', function () {",
                    "    pm.response.to.have.status(409);",
                    "});",
                    "",
                    "pm.test('Error message mentions duplicate email', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('already exists');",
                    "});"
                  ],
                  "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                }
              }
            ]
          },
          {
            "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
            "name": "Create Customer - Invalid Data",
            "request": {
              "description": {
                "content": "Create customer with invalid data to test validation",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 400 (Bad Request)', function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test('Validation errors are present', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('validation');",
                    "});"
                  ],
                  "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                }
              }
            ]
          },
          {
            "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
            "name": "Get Customer by ID",
            "request": {
              "description": {
                "content": "Retrieve customer by ID (uses customerId from previous create request)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "{{customerId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Customer details are returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('customerId');",
                    "    pm.expect(responseJson.data).to.have.property('firstName');",
                    "    pm.expect(responseJson.data).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                }
              }
            ]
          },
          {
            "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
            "name": "Get Customer by ID - Not Found",
            "request": {
              "description": {
                "content": "Attempt to get customer with non-existent ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "non-existent-id"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message indicates not found', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('not found');",
                    "});"
                  ],
                  "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                }
              }
            ]
          },
          {
            "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
            "name": "Update Customer",
            "request": {
              "description": {
                "content": "Update existing customer",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "{{customerId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Customer is updated', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                    "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                    "});"
                  ],
                  "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                }
              }
            ]
          },
          {
            "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
            "name": "Delete Customer",
            "request": {
              "description": {
                "content": "Delete customer by ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "{{customerId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Success message is returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.include('deleted');",
                    "});"
                  ],
                  "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "519c8521-5314-447d-88b1-eb3e5a517e8f",
        "name": "Customer Listing & Search",
        "item": [
          {
            "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
            "name": "Get All Customers - Default Pagination",
            "request": {
              "description": {
                "content": "Get all customers with default pagination",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has pagination info', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('content');",
                    "    pm.expect(responseJson.data).to.have.property('totalElements');",
                    "    pm.expect(responseJson.data).to.have.property('totalPages');",
                    "});"
                  ],
                  "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
                }
              }
            ]
          },
          {
            "id": "66140b0d-2eee-4192-9dc7-376c27635874",
            "name": "Get Customers - Custom Pagination",
            "request": {
              "description": {
                "content": "Get customers with custom pagination (page 0, size 5)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "5"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a1ab72df-9e86-4591-9754-485c15875227",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Pagination parameters are respected', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.size).to.eql(5);",
                    "    pm.expect(responseJson.data.number).to.eql(0);",
                    "});"
                  ],
                  "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
                }
              }
            ]
          },
          {
            "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
            "name": "Get Customers - Filter by Status",
            "request": {
              "description": {
                "content": "Get customers filtered by ACTIVE status",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "status",
                    "value": "ACTIVE"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('All customers have ACTIVE status', function () {",
                    "    const responseJson = pm.response.json();",
                    "    responseJson.data.content.forEach(customer => {",
                    "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
                }
              }
            ]
          },
          {
            "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
            "name": "Search Customers by Name",
            "request": {
              "description": {
                "content": "Search customers by name containing 'Alice'",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "search"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "Alice"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Search results contain Alice', function () {",
                    "    const responseJson = pm.response.json();",
                    "    if (responseJson.data.content.length > 0) {",
                    "        const hasAlice = responseJson.data.content.some(customer => ",
                    "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                    "        );",
                    "        pm.expect(hasAlice).to.be.true;",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
                }
              }
            ]
          },
          {
            "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
            "name": "Search Customers - No Results",
            "request": {
              "description": {
                "content": "Search for non-existent customer name",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers",
                  "search"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "NonExistentName123"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('No results found', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                    "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                    "});"
                  ],
                  "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "824394ce-de6f-4e1a-be9a-d91731962bc3",
        "name": "Test Data Setup",
        "item": [
          {
            "id": "f2d92278-8b53-42f8-a48b-0c5d3364e560",
            "name": "Create Test Customer - Alice",
            "request": {
              "description": {
                "content": "Create Alice Brown for testing search functionality",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9e73a2b7-1781-45fe-922d-7a52cc0d16a0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Alice created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const responseJson = pm.response.json();",
                    "    pm.environment.set('aliceId', responseJson.data.customerId);",
                    "}"
                  ],
                  "_lastExecutionId": "2cb3b6e5-25cd-4d48-872a-290bbc5ebcad"
                }
              }
            ]
          },
          {
            "id": "191b7513-a739-4b57-98a2-71624acd5a44",
            "name": "Create Test Customer - Bob",
            "request": {
              "description": {
                "content": "Create Bob Wilson for testing status filtering",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "04727b32-ae18-43cd-96c5-74d7e3890fad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Bob created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const responseJson = pm.response.json();",
                    "    pm.environment.set('bobId', responseJson.data.customerId);",
                    "}"
                  ],
                  "_lastExecutionId": "af8b571f-467b-47a3-a7c6-4f66f8afca3e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "42f3caa3-951e-47ee-a9dd-7a4deb45c056",
        "name": "Performance Tests",
        "item": [
          {
            "id": "52a86bde-c6d3-4d72-8299-47a865a74ec2",
            "name": "Bulk Customer Listing",
            "request": {
              "description": {
                "content": "Test performance with larger page size",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "v1",
                  "customers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "100"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "32dba650-2f75-483e-a3e9-888a7b769c9d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is less than 1000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has pagination', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('content');",
                    "    pm.expect(responseJson.data).to.have.property('totalElements');",
                    "});"
                  ],
                  "_lastExecutionId": "089b0622-51cf-43c6-b34b-ba8c1968a38e"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "1a333546-2a9c-4a44-8768-6ac6426335e0",
          "type": "text/javascript",
          "exec": [
            "// Set base URL if not already set",
            "if (!pm.environment.get('baseUrl')) {",
            "    pm.environment.set('baseUrl', 'http://localhost:8080');",
            "}"
          ],
          "_lastExecutionId": "226cf9bf-478d-4837-b72e-def993ab9b87"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "4b287b7b-82d0-4733-b02f-e1da6aa0a544",
          "type": "text/javascript",
          "exec": [
            "// Global test to log response time",
            "console.log('Request completed in', pm.response.responseTime, 'ms');"
          ],
          "_lastExecutionId": "432da9cc-0fc4-46d9-a848-b00634f7e527"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "89927c6b-8b54-4b68-bdaa-73631bb80209",
      "name": "Customer Service API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete API testing collection for the Customer Service Microservice\n\nThis collection includes:\n- CRUD operations for customers\n- Search and pagination\n- Error handling scenarios\n- Data validation tests\n\nPrerequisites:\n- Application running on http://localhost:8080\n- MongoDB connected and running",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "customer-service-env",
    "name": "Customer Service Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "",
        "key": "customerId"
      },
      {
        "type": "any",
        "value": "",
        "key": "aliceId"
      },
      {
        "type": "any",
        "value": "6b3628fc-5d2f-4d02-9a2e-ce2d74c708d3",
        "key": "bobId"
      }
    ]
  },
  "globals": {
    "id": "895d3eed-9996-4881-ad8e-6b42d614b70e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 17,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 30,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 17,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 8.588235294117647,
      "responseMin": 3,
      "responseMax": 23,
      "responseSd": 5.698904162250759,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1754633675815,
      "completed": 1754633676241
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 17,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a2f620e5-4c4b-4180-a2ec-300d5a5be2f3",
          "httpRequestId": "b7e25a14-18a1-409c-8e9b-4e0469510e8d"
        },
        "item": {
          "id": "991fa326-58c3-4b57-991d-d728efe65ddb",
          "name": "Application Health Check",
          "request": {
            "description": {
              "content": "Check if the application is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "actuator",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "description": {
            "content": "Check if the application is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "actuator",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db187f83-3e21-4145-a137-b5d23e725025",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "17af8211-7682-4208-9924-5799da9889cd",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 23,
          "responseSize": 94
        },
        "id": "991fa326-58c3-4b57-991d-d728efe65ddb"
      },
      {
        "cursor": {
          "ref": "a2791b1b-4d2f-4d94-afb6-1ac9e1c25f9d",
          "length": 17,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ebeefa24-494f-4008-bb56-b6f82c03f8db"
        },
        "item": {
          "id": "0e9b9afa-78f9-424f-a25b-d46d44814d51",
          "name": "API Documentation",
          "request": {
            "description": {
              "content": "Get OpenAPI documentation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v3",
                "api-docs"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "description": {
            "content": "Get OpenAPI documentation",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "v3",
              "api-docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d01a13f-2219-4c29-84e3-4f02d3a795ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "067da932-4c2b-4a83-9981-a08fd9e88f71",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 94
        },
        "id": "0e9b9afa-78f9-424f-a25b-d46d44814d51"
      },
      {
        "cursor": {
          "ref": "e0790a6d-a61b-4bd4-91fd-d31d835213ec",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cdf8a152-6ea5-4284-9a4e-0dea18e2463d"
        },
        "item": {
          "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a new customer with valid data",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9d826bd9-674d-4f10-ac74-317b9e4493b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "220",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
          }
        },
        "response": {
          "id": "64b57422-484a-4c9f-82eb-39a085d4d518",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 123
        },
        "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 409",
              "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response has customer ID",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has customer ID",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Customer details are correct",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Customer details are correct",
              "message": "Cannot read properties of undefined (reading 'firstName')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "acf022c5-a05d-4451-b6f0-2912dcadfabf",
          "length": 17,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cbbd8f89-630a-4001-828b-69b703ecc726"
        },
        "item": {
          "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
          "name": "Create Customer - Duplicate Email",
          "request": {
            "description": {
              "content": "Attempt to create customer with duplicate email",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 409 (Conflict)', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error message mentions duplicate email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempt to create customer with duplicate email",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df4c89d8-462a-466d-8e41-ddcd791dc7cf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "201",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
          }
        },
        "response": {
          "id": "ae7f4529-64e2-4b46-8bba-16f38a653663",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 123
        },
        "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
        "assertions": [
          {
            "assertion": "Status code is 409 (Conflict)",
            "skipped": false
          },
          {
            "assertion": "Error message mentions duplicate email",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "95d5a0bb-9484-4e7e-924c-01c187785ea0",
          "length": 17,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "976e01b6-5ac8-4b1c-aa34-a161bf3c7654"
        },
        "item": {
          "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
          "name": "Create Customer - Invalid Data",
          "request": {
            "description": {
              "content": "Create customer with invalid data to test validation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ],
                "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create customer with invalid data to test validation",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ba08233-38f9-4655-a473-8473ec2dcaad",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "156",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
          }
        },
        "response": {
          "id": "3d1926c4-2e01-4ae1-8076-161b0174e93e",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 94
        },
        "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
        "assertions": [
          {
            "assertion": "Status code is 400 (Bad Request)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400 (Bad Request)",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Validation errors are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Validation errors are present",
              "message": "expected 'An unexpected error occurred' to include 'validation'",
              "stack": "AssertionError: expected 'An unexpected error occurred' to include 'validation'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "721101df-ffee-4225-af15-fb2d2ce25799",
          "length": 17,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9216617c-dd82-4e68-a6b9-5adbd8dd8e21"
        },
        "item": {
          "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
          "name": "Get Customer by ID",
          "request": {
            "description": {
              "content": "Retrieve customer by ID (uses customerId from previous create request)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Retrieve customer by ID (uses customerId from previous create request)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c16a4a6-ddb9-4153-b870-667a9a620712",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5660f2b8-33cd-4ce4-81a6-eab556c88713",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 94
        },
        "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Customer details are returned",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Customer details are returned",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c9cd95c2-0201-4eec-ab69-af093ffe0245",
          "length": 17,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54b50673-48c1-4f47-882d-42fc6369a826"
        },
        "item": {
          "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
          "name": "Get Customer by ID - Not Found",
          "request": {
            "description": {
              "content": "Attempt to get customer with non-existent ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "non-existent-id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('not found');",
                  "});"
                ],
                "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempt to get customer with non-existent ID",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              "non-existent-id"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f7b408e7-1cc1-4ebe-b22d-248fd943432c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "aad4e0da-47c2-49ac-9f4f-7e1eb7c04b5a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              73,
              68,
              58,
              32,
              110,
              111,
              110,
              45,
              101,
              120,
              105,
              115,
              116,
              101,
              110,
              116,
              45,
              105,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 109
        },
        "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Error message indicates not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bbe0f43d-b587-4fd8-a7e0-439e7895cf5a",
          "length": 17,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7f0438f-4889-4db3-b69a-edfc237a5ebe"
        },
        "item": {
          "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
          "name": "Update Customer",
          "request": {
            "description": {
              "content": "Update existing customer",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ],
                "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update existing customer",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f900c6ab-355b-43cd-aa00-1b2f5052b25a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "227",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
          }
        },
        "response": {
          "id": "da5779ef-2cc3-44ae-b417-03062954eaba",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 94
        },
        "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Customer is updated",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "Customer is updated",
              "message": "Cannot read properties of undefined (reading 'firstName')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fb4d412c-acd9-4d72-b439-f50c47a70314",
          "length": 17,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4c9edf9c-370e-446a-980d-7abeb1b3419d"
        },
        "item": {
          "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
          "name": "Delete Customer",
          "request": {
            "description": {
              "content": "Delete customer by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Delete customer by ID",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c76eddbd-2e99-4910-9719-39fc39f922c4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "8118e4e8-1665-4a01-9c57-5301bec83433",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 94
        },
        "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Success message is returned",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Success message is returned",
              "message": "expected 'An unexpected error occurred' to include 'deleted'",
              "stack": "AssertionError: expected 'An unexpected error occurred' to include 'deleted'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7cab2e8e-8146-458e-9704-7ce849eb65e4",
          "length": 17,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e4954df2-7ba9-411a-a1f4-247417181f16"
        },
        "item": {
          "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
          "name": "Get All Customers - Default Pagination",
          "request": {
            "description": {
              "content": "Get all customers with default pagination",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.data).to.have.property('totalPages');",
                  "});"
                ],
                "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get all customers with default pagination",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2968b7dc-7ab6-4d08-be6b-53f2b429e9ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1909ef72-a27f-44bd-9089-ede35f628d56",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              52,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 781
        },
        "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has pagination info",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has pagination info",
              "message": "expected { customers: [ { …(5) }, …(3) ], …(6) } to have property 'content'",
              "stack": "AssertionError: expected { customers: [ { …(5) }, …(3) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e89a4eb0-3d61-4f9e-9e10-f98eebd65586",
          "length": 17,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "51471d2a-bc6c-4152-a001-48b3dc56cb9c"
        },
        "item": {
          "id": "66140b0d-2eee-4192-9dc7-376c27635874",
          "name": "Get Customers - Custom Pagination",
          "request": {
            "description": {
              "content": "Get customers with custom pagination (page 0, size 5)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1ab72df-9e86-4591-9754-485c15875227",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination parameters are respected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.size).to.eql(5);",
                  "    pm.expect(responseJson.data.number).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get customers with custom pagination (page 0, size 5)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "5"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c13c3298-05c7-487f-b474-628c15da4bfa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4e805b38-04fd-4ca3-88bd-7407a2787ca2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              53,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              52,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 780
        },
        "id": "66140b0d-2eee-4192-9dc7-376c27635874",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Pagination parameters are respected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Pagination parameters are respected",
              "message": "expected undefined to deeply equal +0",
              "stack": "AssertionError: expected undefined to deeply equal +0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "140f52a1-c0c0-4d03-a882-e5b22f68c24d",
          "length": 17,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "def05dc6-b430-473a-b46d-671e8a4fe944"
        },
        "item": {
          "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
          "name": "Get Customers - Filter by Status",
          "request": {
            "description": {
              "content": "Get customers filtered by ACTIVE status",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All customers have ACTIVE status', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.content.forEach(customer => {",
                  "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get customers filtered by ACTIVE status",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "status",
                "value": "ACTIVE"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4931242c-aa7d-453c-b607-f7ca4267cc29",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "962d7e4a-1d6e-49af-acd2-fc15957998d9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              51,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 638
        },
        "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "All customers have ACTIVE status",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "All customers have ACTIVE status",
              "message": "Cannot read properties of undefined (reading 'forEach')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'forEach')\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f9fdecda-8f0f-4765-8789-4ce744cdfeb3",
          "length": 17,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4e9c3ded-e6d7-462d-b3be-855a51152ced"
        },
        "item": {
          "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
          "name": "Search Customers by Name",
          "request": {
            "description": {
              "content": "Search customers by name containing 'Alice'",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "Alice"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain Alice', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.content.length > 0) {",
                  "        const hasAlice = responseJson.data.content.some(customer => ",
                  "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                  "        );",
                  "        pm.expect(hasAlice).to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Search customers by name containing 'Alice'",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": "Alice"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "52a7cd60-f3f6-4cf9-851f-6ac708fb4c46",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3460269b-0390-4aec-991f-e04d7dfe2500",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              49,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 364
        },
        "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Search results contain Alice",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "Search results contain Alice",
              "message": "Cannot read properties of undefined (reading 'length')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'length')\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ac4f982c-b938-4c5e-a5ac-7b8c3b4901d9",
          "length": 17,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5c0233f2-41bb-45da-85e6-26e0c8b99897"
        },
        "item": {
          "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
          "name": "Search Customers - No Results",
          "request": {
            "description": {
              "content": "Search for non-existent customer name",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "NonExistentName123"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('No results found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                  "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Search for non-existent customer name",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": "NonExistentName123"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9cc8d108-a7c2-4926-8247-53827bd32c53",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "76e53d6b-b918-46ac-9505-5edb888c6f8d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              48,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 212
        },
        "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "No results found",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "No results found",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf26fe4d-56d8-4278-9de8-e16c9fc35139",
          "length": 17,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9e48229-89fd-471b-989d-5bfed2eb18c2"
        },
        "item": {
          "id": "f2d92278-8b53-42f8-a48b-0c5d3364e560",
          "name": "Create Test Customer - Alice",
          "request": {
            "description": {
              "content": "Create Alice Brown for testing search functionality",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e73a2b7-1781-45fe-922d-7a52cc0d16a0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alice created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('aliceId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "2cb3b6e5-25cd-4d48-872a-290bbc5ebcad"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create Alice Brown for testing search functionality",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "43dfaa1b-7e5d-4f89-b73a-a56fc3217847",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "211",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
          }
        },
        "response": {
          "id": "f1265cdb-4d6e-4163-8ba9-73e5aae5128b",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              82,
              82,
              79,
              82,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              39,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 126
        },
        "id": "f2d92278-8b53-42f8-a48b-0c5d3364e560",
        "assertions": [
          {
            "assertion": "Alice created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Alice created successfully",
              "message": "expected response to have status code 201 but got 409",
              "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "170dcc81-1b0f-4d93-a3ae-c14a9f0d50d6",
          "length": 17,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e8a2f524-5d70-4539-973c-8d5078824e65"
        },
        "item": {
          "id": "191b7513-a739-4b57-98a2-71624acd5a44",
          "name": "Create Test Customer - Bob",
          "request": {
            "description": {
              "content": "Create Bob Wilson for testing status filtering",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04727b32-ae18-43cd-96c5-74d7e3890fad",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bob created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('bobId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "af8b571f-467b-47a3-a7c6-4f66f8afca3e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create Bob Wilson for testing status filtering",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "49afd9e1-c058-4509-bcf5-b489c4112fa7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "214",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
          }
        },
        "response": {
          "id": "e3a5830f-00af-42cf-9ae9-28eecaf28b9e",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              98,
              51,
              54,
              50,
              56,
              102,
              99,
              45,
              53,
              100,
              50,
              102,
              45,
              52,
              100,
              48,
              50,
              45,
              57,
              97,
              50,
              101,
              45,
              99,
              101,
              50,
              100,
              55,
              52,
              99,
              55,
              48,
              56,
              100,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              105,
              108,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              119,
              105,
              108,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              53,
              53,
              53,
              49,
              50,
              51,
              52,
              53,
              54,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              55,
              56,
              57,
              32,
              80,
              105,
              110,
              101,
              32,
              65,
              118,
              101,
              44,
              32,
              84,
              101,
              115,
              116,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              101,
              79,
              102,
              66,
              105,
              114,
              116,
              104,
              34,
              58,
              34,
              49,
              57,
              56,
              53,
              45,
              49,
              50,
              45,
              48,
              51,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 412
        },
        "id": "191b7513-a739-4b57-98a2-71624acd5a44",
        "assertions": [
          {
            "assertion": "Bob created successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7e0485aa-c8e4-48a1-969e-82d007b1a47d",
          "length": 17,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0440bc3e-4061-426f-b978-74b2f56f6669"
        },
        "item": {
          "id": "52a86bde-c6d3-4d72-8299-47a865a74ec2",
          "name": "Bulk Customer Listing",
          "request": {
            "description": {
              "content": "Test performance with larger page size",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32dba650-2f75-483e-a3e9-888a7b769c9d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "});"
                ],
                "_lastExecutionId": "089b0622-51cf-43c6-b34b-ba8c1968a38e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test performance with larger page size",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "customers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a58aa792-8874-4dd0-934c-c44fecd620e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5495a8dd-bd3f-47e8-8ced-322965ed148b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Fri, 08 Aug 2025 06:14:35 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              83,
              85,
              67,
              67,
              69,
              83,
              83,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              98,
              51,
              54,
              50,
              56,
              102,
              99,
              45,
              53,
              100,
              50,
              102,
              45,
              52,
              100,
              48,
              50,
              45,
              57,
              97,
              50,
              101,
              45,
              99,
              101,
              50,
              100,
              55,
              52,
              99,
              55,
              48,
              56,
              100,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              105,
              108,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              119,
              105,
              108,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              55,
              97,
              49,
              98,
              53,
              100,
              51,
              97,
              45,
              55,
              97,
              55,
              52,
              45,
              52,
              49,
              99,
              52,
              45,
              98,
              97,
              54,
              101,
              45,
              51,
              56,
              48,
              53,
              56,
              56,
              50,
              50,
              57,
              55,
              54,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              108,
              105,
              99,
              101,
              46,
              98,
              114,
              111,
              119,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              111,
              98,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              111,
              98,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              73,
              78,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              44,
              123,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              54,
              56,
              57,
              51,
              55,
              101,
              98,
              98,
              53,
              50,
              98,
              98,
              97,
              56,
              100,
              48,
              102,
              99,
              53,
              55,
              97,
              51,
              50,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              83,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              53,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              56,
              84,
              48,
              54,
              58,
              49,
              52,
              58,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 935
        },
        "id": "52a86bde-c6d3-4d72-8299-47a865a74ec2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Response has pagination",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has pagination",
              "message": "expected { customers: [ { …(5) }, …(4) ], …(6) } to have property 'content'",
              "stack": "AssertionError: expected { customers: [ { …(5) }, …(4) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:3:17)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 5167
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 409",
          "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "ad19baece84d02cd43c59a6e371a3a9e",
          "id": "c9584486-6fa2-406f-ab26-23b492e9fe34",
          "timestamp": 1754633675919,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e0790a6d-a61b-4bd4-91fd-d31d835213ec",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cdf8a152-6ea5-4284-9a4e-0dea18e2463d",
          "scriptId": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
          "execution": "29e29df0-c731-46be-8451-200b0a5a8afc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has customer ID",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "d85eedb6f354a4468f42067421d9cdc0",
          "id": "39117559-9763-4c9a-ab53-a949354fd82e",
          "timestamp": 1754633675920,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e0790a6d-a61b-4bd4-91fd-d31d835213ec",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cdf8a152-6ea5-4284-9a4e-0dea18e2463d",
          "scriptId": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
          "execution": "29e29df0-c731-46be-8451-200b0a5a8afc"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Customer details are correct",
          "message": "Cannot read properties of undefined (reading 'firstName')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "64a02b973e7df6a2891cdee0266aed1c",
          "id": "5aef6eec-0610-4a58-9c87-1e80c3ec23df",
          "timestamp": 1754633675920,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
          "name": "Create Customer - Valid",
          "request": {
            "description": {
              "content": "Create a new customer with valid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has customer ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.environment.set('customerId', responseJson.data.customerId);",
                  "});",
                  "",
                  "pm.test('Customer details are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John');",
                  "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                  "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e0790a6d-a61b-4bd4-91fd-d31d835213ec",
          "length": 17,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cdf8a152-6ea5-4284-9a4e-0dea18e2463d",
          "scriptId": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
          "execution": "29e29df0-c731-46be-8451-200b0a5a8afc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400 (Bad Request)",
          "message": "expected response to have status code 400 but got 500",
          "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "54c379953c125f222334b67f38f76aa8",
          "id": "9420edfa-d3c3-4e23-9285-8b9bf00f8dae",
          "timestamp": 1754633675963,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
          "name": "Create Customer - Invalid Data",
          "request": {
            "description": {
              "content": "Create customer with invalid data to test validation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ],
                "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "95d5a0bb-9484-4e7e-924c-01c187785ea0",
          "length": 17,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "976e01b6-5ac8-4b1c-aa34-a161bf3c7654",
          "scriptId": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
          "execution": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Validation errors are present",
          "message": "expected 'An unexpected error occurred' to include 'validation'",
          "stack": "AssertionError: expected 'An unexpected error occurred' to include 'validation'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "b9d34caa95e5bf08f323d7b54a1dd475",
          "id": "f55e007c-129f-4541-9f00-8b9a81303cf1",
          "timestamp": 1754633675964,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
          "name": "Create Customer - Invalid Data",
          "request": {
            "description": {
              "content": "Create customer with invalid data to test validation",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('validation');",
                  "});"
                ],
                "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "95d5a0bb-9484-4e7e-924c-01c187785ea0",
          "length": 17,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "976e01b6-5ac8-4b1c-aa34-a161bf3c7654",
          "scriptId": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
          "execution": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "88077207591abb7eae0749194e10f99e",
          "id": "34427e59-41e0-4f66-acad-fc8ec45c8e2f",
          "timestamp": 1754633675983,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
          "name": "Get Customer by ID",
          "request": {
            "description": {
              "content": "Retrieve customer by ID (uses customerId from previous create request)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "721101df-ffee-4225-af15-fb2d2ce25799",
          "length": 17,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9216617c-dd82-4e68-a6b9-5adbd8dd8e21",
          "scriptId": "145b1365-4a9e-435d-a761-8e62244134d2",
          "execution": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Customer details are returned",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "a8e9952a471b8381d70a23028a3d84b5",
          "id": "de474924-a576-4586-bfd1-99c9f3de0713",
          "timestamp": 1754633675984,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
          "name": "Get Customer by ID",
          "request": {
            "description": {
              "content": "Retrieve customer by ID (uses customerId from previous create request)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer details are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('customerId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "721101df-ffee-4225-af15-fb2d2ce25799",
          "length": 17,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9216617c-dd82-4e68-a6b9-5adbd8dd8e21",
          "scriptId": "145b1365-4a9e-435d-a761-8e62244134d2",
          "execution": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "42ae30cde23ec0a499343a1bff359dbf",
          "id": "c6b29266-c042-4c4b-a9f2-b254e205ac29",
          "timestamp": 1754633676022,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
          "name": "Update Customer",
          "request": {
            "description": {
              "content": "Update existing customer",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ],
                "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bbe0f43d-b587-4fd8-a7e0-439e7895cf5a",
          "length": 17,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7f0438f-4889-4db3-b69a-edfc237a5ebe",
          "scriptId": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
          "execution": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "Customer is updated",
          "message": "Cannot read properties of undefined (reading 'firstName')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'firstName')\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "54a0b039c271a8bc2fd32f44cf81a9bc",
          "id": "7c6d6f16-70e1-4bd8-89cb-d02906af4fd0",
          "timestamp": 1754633676022,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
          "name": "Update Customer",
          "request": {
            "description": {
              "content": "Update existing customer",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Customer is updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                  "});"
                ],
                "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bbe0f43d-b587-4fd8-a7e0-439e7895cf5a",
          "length": 17,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7f0438f-4889-4db3-b69a-edfc237a5ebe",
          "scriptId": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
          "execution": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "71c452758108f3ab55bcdae8c5e6d402",
          "id": "a300b30d-db5f-48b6-a845-b4d4df7e1aed",
          "timestamp": 1754633676041,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
          "name": "Delete Customer",
          "request": {
            "description": {
              "content": "Delete customer by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb4d412c-acd9-4d72-b439-f50c47a70314",
          "length": 17,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4c9edf9c-370e-446a-980d-7abeb1b3419d",
          "scriptId": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
          "execution": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Success message is returned",
          "message": "expected 'An unexpected error occurred' to include 'deleted'",
          "stack": "AssertionError: expected 'An unexpected error occurred' to include 'deleted'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "17e58b157e77ad0428e565c8dce9f253",
          "id": "ab910030-e4e4-42e3-9d72-e7540ba9f9c4",
          "timestamp": 1754633676041,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
          "name": "Delete Customer",
          "request": {
            "description": {
              "content": "Delete customer by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "{{customerId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
              }
            }
          ]
        },
        "parent": {
          "id": "d3abd47f-eff9-4c35-8762-c90b66220d32",
          "name": "Customer CRUD",
          "item": [
            {
              "id": "1b3295f3-a269-49d1-905e-ed93753ecb9f",
              "name": "Create Customer - Valid",
              "request": {
                "description": {
                  "content": "Create a new customer with valid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, New York, NY 10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eeb5241-8332-42fd-a7ee-e788ec8b5b55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has customer ID', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.environment.set('customerId', responseJson.data.customerId);",
                      "});",
                      "",
                      "pm.test('Customer details are correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John');",
                      "    pm.expect(responseJson.data.lastName).to.eql('Doe');",
                      "    pm.expect(responseJson.data.email).to.eql('john.doe@example.com');",
                      "});"
                    ],
                    "_lastExecutionId": "29e29df0-c731-46be-8451-200b0a5a8afc"
                  }
                }
              ]
            },
            {
              "id": "c95416f9-838c-4686-bfdc-fe4c5461c6fe",
              "name": "Create Customer - Duplicate Email",
              "request": {
                "description": {
                  "content": "Attempt to create customer with duplicate email",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak Street\",\n  \"dateOfBirth\": \"1992-03-20\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a85a47b7-3319-426c-ad46-03f82dd77418",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 409 (Conflict)', function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test('Error message mentions duplicate email', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "e02af765-a59e-45f8-9740-5553d70eff58"
                  }
                }
              ]
            },
            {
              "id": "2997a666-1c8d-4205-9101-e7fdc39da40f",
              "name": "Create Customer - Invalid Data",
              "request": {
                "description": {
                  "content": "Create customer with invalid data to test validation",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"123\",\n  \"dateOfBirth\": \"invalid-date\",\n  \"customerStatus\": \"INVALID_STATUS\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722abb9b-d95d-4829-97ee-dc3dd992cd77",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400 (Bad Request)', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation errors are present', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('validation');",
                      "});"
                    ],
                    "_lastExecutionId": "aa2f490f-f8c9-4d03-8bc7-35a95084ef41"
                  }
                }
              ]
            },
            {
              "id": "72fbb9af-dd55-4e2e-8f23-e7538a2bc54a",
              "name": "Get Customer by ID",
              "request": {
                "description": {
                  "content": "Retrieve customer by ID (uses customerId from previous create request)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "145b1365-4a9e-435d-a761-8e62244134d2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer details are returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('customerId');",
                      "    pm.expect(responseJson.data).to.have.property('firstName');",
                      "    pm.expect(responseJson.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d4a1f54a-c970-40bb-8f0a-d1880457ba08"
                  }
                }
              ]
            },
            {
              "id": "84f6c43e-d66d-4b6d-8332-08af3687f2e8",
              "name": "Get Customer by ID - Not Found",
              "request": {
                "description": {
                  "content": "Attempt to get customer with non-existent ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "non-existent-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d73ee87-dacd-4385-ab34-c8dd6a29132f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message indicates not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('not found');",
                      "});"
                    ],
                    "_lastExecutionId": "28d34a53-b7ba-4820-a896-f1822d12a8d2"
                  }
                }
              ]
            },
            {
              "id": "59156228-5f6e-4f79-b9ec-e5f00ac91979",
              "name": "Update Customer",
              "request": {
                "description": {
                  "content": "Update existing customer",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Main Street, Updated Address\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a7fbb45-d7a3-496c-90fa-21d2ea5f728c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Customer is updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                      "    pm.expect(responseJson.data.customerStatus).to.eql('INACTIVE');",
                      "});"
                    ],
                    "_lastExecutionId": "b645f9e5-5122-4ebd-a93e-87f630cdee46"
                  }
                }
              ]
            },
            {
              "id": "4088d212-248a-40b0-b06e-1e8d7f067377",
              "name": "Delete Customer",
              "request": {
                "description": {
                  "content": "Delete customer by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "{{customerId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Success message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb4d412c-acd9-4d72-b439-f50c47a70314",
          "length": 17,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4c9edf9c-370e-446a-980d-7abeb1b3419d",
          "scriptId": "aad1ac1d-023b-4795-970c-ed5b41d835d3",
          "execution": "a302c990-d3bf-4232-b76b-5b9aae51ed76"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has pagination info",
          "message": "expected { customers: [ { …(5) }, …(3) ], …(6) } to have property 'content'",
          "stack": "AssertionError: expected { customers: [ { …(5) }, …(3) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "66c9c61ba5602d150115c1ee108b278f",
          "id": "f7edcd3c-6d6d-4671-9fea-abd106bc6a08",
          "timestamp": 1754633676069,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
          "name": "Get All Customers - Default Pagination",
          "request": {
            "description": {
              "content": "Get all customers with default pagination",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.data).to.have.property('totalPages');",
                  "});"
                ],
                "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
              }
            }
          ]
        },
        "parent": {
          "id": "519c8521-5314-447d-88b1-eb3e5a517e8f",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
                  }
                }
              ]
            },
            {
              "id": "66140b0d-2eee-4192-9dc7-376c27635874",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1ab72df-9e86-4591-9754-485c15875227",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
                  }
                }
              ]
            },
            {
              "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
                  }
                }
              ]
            },
            {
              "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
                  }
                }
              ]
            },
            {
              "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7cab2e8e-8146-458e-9704-7ce849eb65e4",
          "length": 17,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e4954df2-7ba9-411a-a1f4-247417181f16",
          "scriptId": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
          "execution": "51dec8ca-c910-423c-8d35-e666c177c8a5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Pagination parameters are respected",
          "message": "expected undefined to deeply equal +0",
          "stack": "AssertionError: expected undefined to deeply equal +0\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "6036439b8831a37599f7c8f38fbcdf69",
          "id": "2d8ece7b-6bc8-49b8-a9c5-515bfadc1a58",
          "timestamp": 1754633676106,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "66140b0d-2eee-4192-9dc7-376c27635874",
          "name": "Get Customers - Custom Pagination",
          "request": {
            "description": {
              "content": "Get customers with custom pagination (page 0, size 5)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1ab72df-9e86-4591-9754-485c15875227",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination parameters are respected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.size).to.eql(5);",
                  "    pm.expect(responseJson.data.number).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
              }
            }
          ]
        },
        "parent": {
          "id": "519c8521-5314-447d-88b1-eb3e5a517e8f",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
                  }
                }
              ]
            },
            {
              "id": "66140b0d-2eee-4192-9dc7-376c27635874",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1ab72df-9e86-4591-9754-485c15875227",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
                  }
                }
              ]
            },
            {
              "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
                  }
                }
              ]
            },
            {
              "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
                  }
                }
              ]
            },
            {
              "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e89a4eb0-3d61-4f9e-9e10-f98eebd65586",
          "length": 17,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "51471d2a-bc6c-4152-a001-48b3dc56cb9c",
          "scriptId": "a1ab72df-9e86-4591-9754-485c15875227",
          "execution": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "All customers have ACTIVE status",
          "message": "Cannot read properties of undefined (reading 'forEach')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'forEach')\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "a0ac6781684a6041ad7ba4825d74d17c",
          "id": "6fd8f901-da4c-4c2a-bd4b-fed699439b0e",
          "timestamp": 1754633676127,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
          "name": "Get Customers - Filter by Status",
          "request": {
            "description": {
              "content": "Get customers filtered by ACTIVE status",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All customers have ACTIVE status', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.content.forEach(customer => {",
                  "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
              }
            }
          ]
        },
        "parent": {
          "id": "519c8521-5314-447d-88b1-eb3e5a517e8f",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
                  }
                }
              ]
            },
            {
              "id": "66140b0d-2eee-4192-9dc7-376c27635874",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1ab72df-9e86-4591-9754-485c15875227",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
                  }
                }
              ]
            },
            {
              "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
                  }
                }
              ]
            },
            {
              "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
                  }
                }
              ]
            },
            {
              "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "140f52a1-c0c0-4d03-a882-e5b22f68c24d",
          "length": 17,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "def05dc6-b430-473a-b46d-671e8a4fe944",
          "scriptId": "22b8f9f6-dc32-46be-b960-83067e885d6c",
          "execution": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "Search results contain Alice",
          "message": "Cannot read properties of undefined (reading 'length')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'length')\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "b583fa792ed88a4476c338c67053c8bd",
          "id": "3a047877-088f-4eea-921a-9b59230d2b44",
          "timestamp": 1754633676152,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
          "name": "Search Customers by Name",
          "request": {
            "description": {
              "content": "Search customers by name containing 'Alice'",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "Alice"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain Alice', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.content.length > 0) {",
                  "        const hasAlice = responseJson.data.content.some(customer => ",
                  "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                  "        );",
                  "        pm.expect(hasAlice).to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
              }
            }
          ]
        },
        "parent": {
          "id": "519c8521-5314-447d-88b1-eb3e5a517e8f",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
                  }
                }
              ]
            },
            {
              "id": "66140b0d-2eee-4192-9dc7-376c27635874",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1ab72df-9e86-4591-9754-485c15875227",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
                  }
                }
              ]
            },
            {
              "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
                  }
                }
              ]
            },
            {
              "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
                  }
                }
              ]
            },
            {
              "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f9fdecda-8f0f-4765-8789-4ce744cdfeb3",
          "length": 17,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4e9c3ded-e6d7-462d-b3be-855a51152ced",
          "scriptId": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
          "execution": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "No results found",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "aa962e3209d748fe4065e2f275f1c200",
          "id": "d3e60eaf-e7d4-42d4-8964-9651101eaec5",
          "timestamp": 1754633676173,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
          "name": "Search Customers - No Results",
          "request": {
            "description": {
              "content": "Search for non-existent customer name",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "NonExistentName123"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('No results found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                  "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                  "});"
                ],
                "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
              }
            }
          ]
        },
        "parent": {
          "id": "519c8521-5314-447d-88b1-eb3e5a517e8f",
          "name": "Customer Listing & Search",
          "item": [
            {
              "id": "db60f2d1-227e-4a9c-a399-2f3d8f72bad5",
              "name": "Get All Customers - Default Pagination",
              "request": {
                "description": {
                  "content": "Get all customers with default pagination",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9a914fdf-ece3-45e3-a05e-5ad85a505c44",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination info', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "    pm.expect(responseJson.data).to.have.property('totalPages');",
                      "});"
                    ],
                    "_lastExecutionId": "51dec8ca-c910-423c-8d35-e666c177c8a5"
                  }
                }
              ]
            },
            {
              "id": "66140b0d-2eee-4192-9dc7-376c27635874",
              "name": "Get Customers - Custom Pagination",
              "request": {
                "description": {
                  "content": "Get customers with custom pagination (page 0, size 5)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1ab72df-9e86-4591-9754-485c15875227",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Pagination parameters are respected', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.size).to.eql(5);",
                      "    pm.expect(responseJson.data.number).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "f3d8569e-70b5-45dc-b97f-ab79af1fd167"
                  }
                }
              ]
            },
            {
              "id": "859d409e-4b3e-4f02-a201-f12aa1ac8010",
              "name": "Get Customers - Filter by Status",
              "request": {
                "description": {
                  "content": "Get customers filtered by ACTIVE status",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "ACTIVE"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22b8f9f6-dc32-46be-b960-83067e885d6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('All customers have ACTIVE status', function () {",
                      "    const responseJson = pm.response.json();",
                      "    responseJson.data.content.forEach(customer => {",
                      "        pm.expect(customer.customerStatus).to.eql('ACTIVE');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "d4ddf748-96f8-41da-a2f3-d8ef58b7ab70"
                  }
                }
              ]
            },
            {
              "id": "653bc8f6-57f1-41d4-ac70-eab4c2e2c5cc",
              "name": "Search Customers by Name",
              "request": {
                "description": {
                  "content": "Search customers by name containing 'Alice'",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "Alice"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3367e5-c6d3-492e-b72a-6704fdb56a2d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Search results contain Alice', function () {",
                      "    const responseJson = pm.response.json();",
                      "    if (responseJson.data.content.length > 0) {",
                      "        const hasAlice = responseJson.data.content.some(customer => ",
                      "            customer.firstName.includes('Alice') || customer.lastName.includes('Alice')",
                      "        );",
                      "        pm.expect(hasAlice).to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "de9bb809-0c4b-47a8-a067-72d658cf04bd"
                  }
                }
              ]
            },
            {
              "id": "bc47df52-086a-4c2a-80b2-e7140d2d087f",
              "name": "Search Customers - No Results",
              "request": {
                "description": {
                  "content": "Search for non-existent customer name",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "NonExistentName123"
                    },
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('No results found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data.content).to.be.an('array').that.is.empty;",
                      "    pm.expect(responseJson.data.totalElements).to.eql(0);",
                      "});"
                    ],
                    "_lastExecutionId": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac4f982c-b938-4c5e-a5ac-7b8c3b4901d9",
          "length": 17,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5c0233f2-41bb-45da-85e6-26e0c8b99897",
          "scriptId": "3ce57841-7d6f-42c0-9449-a76cdc6c18fe",
          "execution": "49070ae0-befc-4f0b-81c7-b7c312c8bab6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Alice created successfully",
          "message": "expected response to have status code 201 but got 409",
          "stack": "AssertionError: expected response to have status code 201 but got 409\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "6bbbf1cec3f6b75e87c978afe488c2a3",
          "id": "f73a54c3-6dea-45ff-8ed8-f953e7c098d4",
          "timestamp": 1754633676192,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f2d92278-8b53-42f8-a48b-0c5d3364e560",
          "name": "Create Test Customer - Alice",
          "request": {
            "description": {
              "content": "Create Alice Brown for testing search functionality",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e73a2b7-1781-45fe-922d-7a52cc0d16a0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Alice created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('aliceId', responseJson.data.customerId);",
                  "}"
                ],
                "_lastExecutionId": "2cb3b6e5-25cd-4d48-872a-290bbc5ebcad"
              }
            }
          ]
        },
        "parent": {
          "id": "824394ce-de6f-4e1a-be9a-d91731962bc3",
          "name": "Test Data Setup",
          "item": [
            {
              "id": "f2d92278-8b53-42f8-a48b-0c5d3364e560",
              "name": "Create Test Customer - Alice",
              "request": {
                "description": {
                  "content": "Create Alice Brown for testing search functionality",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Brown\",\n  \"email\": \"alice.brown@example.com\",\n  \"phone\": \"+1987654321\",\n  \"address\": \"456 Oak St, New City\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"customerStatus\": \"ACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e73a2b7-1781-45fe-922d-7a52cc0d16a0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Alice created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('aliceId', responseJson.data.customerId);",
                      "}"
                    ],
                    "_lastExecutionId": "2cb3b6e5-25cd-4d48-872a-290bbc5ebcad"
                  }
                }
              ]
            },
            {
              "id": "191b7513-a739-4b57-98a2-71624acd5a44",
              "name": "Create Test Customer - Bob",
              "request": {
                "description": {
                  "content": "Create Bob Wilson for testing status filtering",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Wilson\",\n  \"email\": \"bob.wilson@example.com\",\n  \"phone\": \"+1555123456\",\n  \"address\": \"789 Pine Ave, Test City\",\n  \"dateOfBirth\": \"1985-12-03\",\n  \"customerStatus\": \"INACTIVE\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04727b32-ae18-43cd-96c5-74d7e3890fad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bob created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('bobId', responseJson.data.customerId);",
                      "}"
                    ],
                    "_lastExecutionId": "af8b571f-467b-47a3-a7c6-4f66f8afca3e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cf26fe4d-56d8-4278-9de8-e16c9fc35139",
          "length": 17,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9e48229-89fd-471b-989d-5bfed2eb18c2",
          "scriptId": "9e73a2b7-1781-45fe-922d-7a52cc0d16a0",
          "execution": "2cb3b6e5-25cd-4d48-872a-290bbc5ebcad"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has pagination",
          "message": "expected { customers: [ { …(5) }, …(4) ], …(6) } to have property 'content'",
          "stack": "AssertionError: expected { customers: [ { …(5) }, …(4) ], …(6) } to have property 'content'\n   at Object.eval sandbox-script.js:3:17)",
          "checksum": "4ecd2f35f7066bddbdef7d6197afaa53",
          "id": "de24c591-817e-4b75-8c80-f5d8955f4092",
          "timestamp": 1754633676237,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "52a86bde-c6d3-4d72-8299-47a865a74ec2",
          "name": "Bulk Customer Listing",
          "request": {
            "description": {
              "content": "Test performance with larger page size",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "v1",
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32dba650-2f75-483e-a3e9-888a7b769c9d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "});"
                ],
                "_lastExecutionId": "089b0622-51cf-43c6-b34b-ba8c1968a38e"
              }
            }
          ]
        },
        "parent": {
          "id": "42f3caa3-951e-47ee-a9dd-7a4deb45c056",
          "name": "Performance Tests",
          "item": [
            {
              "id": "52a86bde-c6d3-4d72-8299-47a865a74ec2",
              "name": "Bulk Customer Listing",
              "request": {
                "description": {
                  "content": "Test performance with larger page size",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32dba650-2f75-483e-a3e9-888a7b769c9d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is less than 1000ms', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has pagination', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('content');",
                      "    pm.expect(responseJson.data).to.have.property('totalElements');",
                      "});"
                    ],
                    "_lastExecutionId": "089b0622-51cf-43c6-b34b-ba8c1968a38e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e0485aa-c8e4-48a1-969e-82d007b1a47d",
          "length": 17,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0440bc3e-4061-426f-b978-74b2f56f6669",
          "scriptId": "32dba650-2f75-483e-a3e9-888a7b769c9d",
          "execution": "089b0622-51cf-43c6-b34b-ba8c1968a38e"
        }
      }
    ],
    "error": null
  }
}